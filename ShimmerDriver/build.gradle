apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'
archivesBaseName = 'ShimmerDriver'

/*Rev0.2
* - fixes for shimmer2r and writeSensors not working after streaming
*/
version = '0.9.25beta' 

    group = 'com.shimmerresearch.driver'

sourceCompatibility = 1.7
targetCompatibility = 1.7

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
    }

}

repositories {
	jcenter()
    mavenCentral()
    flatDir {
       dirs 'libs'
   }
}

sourceSets {
    main
}


    // custom tasks for creating source/javadoc jars
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    // add javadoc/source jar tasks as artifacts
    artifacts {
        archives sourcesJar, javadocJar
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                if (plugins.hasPlugin('war')) {
                    from components.web
                } else {
                    from components.java
                }

                artifact sourcesJar 
                //artifact javadocJar
            }
        }
    }

/*    bintray {
        user = bintray_username //this usually comes from gradle.properties file in ~/.gradle
        key = bintray_api_key //this usually comes from gradle.properties file in ~/.gradle
        
//        configurations = ['deployables'] //When uploading configuration files
        // - OR -
        publications = ['mavenJava'] //When uploading Maven-based publication files
        // - AND/OR -
//        filesSpec { //When uploading any arbitrary files ('filesSpec' is a standard Gradle CopySpec)
//            from 'arbitrary-files'
//            into 'standalone_files/level1'
//            rename '(.+)\\.(.+)', '$1-suffix.$2'
//        }
        dryRun = false //Whether to run this as dry-run, without deploying
        publish = true //If version should be auto published after an upload
        pkg {
//            repo = 'myrepo'
	        repo = 'testshimmer'
	        name = 'shimmerdriver'
//            userOrg = 'myorg' //An optional organization name when the repo belongs to one of the user's orgs
            desc = 'what a fantastic package indeed!'
            websiteUrl = 'https://github.com/bintray/bintray-examples'
            issueTrackerUrl = 'https://github.com/bintray/bintray-examples/issues'
            vcsUrl = 'https://github.com/JongChern/ShimmerTest'
            licenses = ['Apache-2.0']
            labels = ['example', 'gradle', 'bintray']
            publicDownloadNumbers = true
            attributes= ['a': ['ay1', 'ay2'], 'b': ['bee'], c: 'cee'] //Optional package-level attributes
            //Optional version descriptor
            version {
                name = project.version //Bintray logical version name
                desc = 'optional, version-specific description'
//                released  = 'optional, date of the version release' //2 possible values: date in the format of 'yyyy-MM-dd'T'HH:mm:ss.SSSZZ' OR a java.util.Date instance
//                vcsTag = '1.3.0'
//                attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin'] //Optional version-level attributes
//                gpg {
//                    sign = true //Determines whether to GPG sign the files. The default is false
//                    passphrase = 'passphrase' //Optional. The passphrase for GPG signing'
//                }
                mavenCentralSync {
                    sync = false //Optional (true by default). Determines whether to sync the version to Maven Central.
                    user = 'userToken' //OSS user token
                    password = 'paasword' //OSS user password
                    close = '1' //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
                }
            }
        }
    }
  */  
  /*
    bintray {
        user = shimmer_bintray_username //this usually comes from gradle.properties file in ~/.gradle
        key = shimmer_bintray_api_key //this usually comes from gradle.properties file in ~/.gradle
        
//        configurations = ['deployables'] //When uploading configuration files
        // - OR -
        publications = ['mavenJava'] //When uploading Maven-based publication files
        // - AND/OR -
//        filesSpec { //When uploading any arbitrary files ('filesSpec' is a standard Gradle CopySpec)
//            from 'arbitrary-files'
//            into 'standalone_files/level1'
//            rename '(.+)\\.(.+)', '$1-suffix.$2'
//        }
        dryRun = false //Whether to run this as dry-run, without deploying
        publish = true //If version should be auto published after an upload
        pkg {
//            repo = 'myrepo'
	        repo = 'Shimmer'
	        name = 'shimmerdriver'
//            userOrg = 'myorg' //An optional organization name when the repo belongs to one of the user's orgs
            desc = 'This is the basic Shimmer API, which has no OS specific code'
            websiteUrl = 'https://github.com/ShimmerEngineering/Shimmer-Java-Android-API'
            issueTrackerUrl = 'https://github.com/ShimmerEngineering/Shimmer-Java-Android-API/issues'
            vcsUrl = 'https://github.com/ShimmerEngineering/Shimmer-Java-Android-API'
            licenses = ['Apache-2.0']
            labels = ['example', 'gradle', 'bintray']
            publicDownloadNumbers = true
            attributes= ['a': ['ay1', 'ay2'], 'b': ['bee'], c: 'cee'] //Optional package-level attributes
            //Optional version descriptor
            version {
                name = project.version //Bintray logical version name
                desc = ''
//                released  = 'optional, date of the version release' //2 possible values: date in the format of 'yyyy-MM-dd'T'HH:mm:ss.SSSZZ' OR a java.util.Date instance
//                vcsTag = '1.3.0'
//                attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin'] //Optional version-level attributes
//                gpg {
//                    sign = true //Determines whether to GPG sign the files. The default is false
//                    passphrase = 'passphrase' //Optional. The passphrase for GPG signing'
//                }
                mavenCentralSync {
                    sync = false //Optional (true by default). Determines whether to sync the version to Maven Central.
                    user = 'userToken' //OSS user token
                    password = 'paasword' //OSS user password
                    close = '1' //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
                }
            }
        }
    }
*/
/*
sourceSets {
    main {
        java{
        	srcDirs 'src'
        	exclude 'com/shimmerresearch/driver/ShimmerGQ_802154_SD.java'
        	}
       }
}
*/

//create a single Jar with all dependencies
task fatJar(type: Jar) {
	manifest {
        attributes 'Implementation-Title': 'Gradle Jar File Example',  
        	'Implementation-Version': version,
        	'Main-Class': 'com.shimmerresearch.driver'
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

//create a single Jar without dependencies
task singleJar(type: Jar) {
	manifest {
        attributes 'Implementation-Title': 'Gradle Jar File Example',  
        	'Implementation-Version': version,
        	'Main-Class': 'com.shimmerresearch.driver'
    }
    baseName = project.name
    jar {
     from sourceSets.main.allSource
 	}
    with jar
}

uploadArchives {
    repositories.mavenDeployer {
        repository(url: "C:/")
    }
}

jar {
      manifest {
        attributes 'Implementation-Title': 'Gradle Quickstart',
                   'Implementation-Version': version
    }
}

dependencies {
	compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'
	compile group: 'org.apache.commons', name: 'commons-math3', version: '3.6'
	compile group: 'org.apache.commons', name: 'commons-math', version: '2.2'
	compile group: 'com.google.guava', name: 'guava', version: '19.0'
   
	// https://mvnrepository.com/artifact/javax.vecmath/vecmath
	//compile group: 'javax.vecmath', name: 'vecmath', version: '1.5.2'
	compile group: 'java3d', name: 'vecmath', version: '1.3.1'
   
	//compile name: 'ShimmerBiophysicalProcessingLibrary_Rev_0_11'
	compile group: 'commons-collections', name: 'commons-collections', version: '3.2'
	testCompile group: 'junit', name: 'junit', version: '4.+'
	// https://mvnrepository.com/artifact/com.google.protobuf/protobuf-java
	compile group: 'com.google.protobuf', name: 'protobuf-java', version: '3.4.0'

   //compile 'io.grpc:grpc-all:0.14.0'
   // https://mvnrepository.com/artifact/io.grpc/grpc-all
	compile group: 'io.grpc', name: 'grpc-all', version: '1.6.1'
	compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.3.6'
	// https://mvnrepository.com/artifact/com.codeminders/hidapi
	compile group: 'com.codeminders', name: 'hidapi', version: '1.1'
	// https://mvnrepository.com/artifact/joda-time/joda-time
	compile group: 'joda-time', name: 'joda-time', version: '2.9.4'
	// https://mvnrepository.com/artifact/com.github.wendykierp/JTransforms
	compile group: 'com.github.wendykierp', name: 'JTransforms', version: '3.1'
	// https://mvnrepository.com/artifact/com.google.protobuf/protobuf-lite
	//compile group: 'com.google.protobuf', name: 'protobuf-lite', version: '3.4.0'
	
	
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.21'
    	    
    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
    // https://mvnrepository.com/artifact/org.mockito/mockito-all
	testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'
    // https://mvnrepository.com/artifact/org.jblas/jblas
	//compile group: 'org.jblas', name: 'jblas', version: '1.2.4'
} 


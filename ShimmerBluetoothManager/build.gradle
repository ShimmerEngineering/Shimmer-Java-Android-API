apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'
archivesBaseName = 'ShimmerBluetoothManager'
group = 'com.shimmerresearch.managers.bluetoothmanager'
//group = "myorg"
version = '0.9.7beta'

sourceCompatibility = 1.7
targetCompatibility = 1.7

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
    }
}

repositories {
    jcenter()
    mavenCentral()
    flatDir {
       dirs 'libs'
	   }
  	maven  {
		url "http://repository.ops4j.org/maven2/"
   	}
}

sourceSets {
    main
}

 // custom tasks for creating source/javadoc jars
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    // add javadoc/source jar tasks as artifacts
    artifacts {
        archives sourcesJar, javadocJar
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                if (plugins.hasPlugin('war')) {
                    from components.web
                } else {
                    from components.java
                }

                artifact sourcesJar 
                //artifact javadocJar
            }
        }
    }

    /*
    bintray {
        user = bintray_username //this usually comes from gradle.properties file in ~/.gradle
        key = bintray_api_key //this usually comes from gradle.properties file in ~/.gradle
        
//        configurations = ['deployables'] //When uploading configuration files
        // - OR -
        publications = ['mavenJava'] //When uploading Maven-based publication files
        // - AND/OR -
//        filesSpec { //When uploading any arbitrary files ('filesSpec' is a standard Gradle CopySpec)
//            from 'arbitrary-files'
//            into 'standalone_files/level1'
//            rename '(.+)\\.(.+)', '$1-suffix.$2'
//        }
        dryRun = false //Whether to run this as dry-run, without deploying
        publish = true //If version should be auto published after an upload
        pkg {
//            repo = 'myrepo'
	        repo = 'testshimmer'
	        name = 'shimmerbluetoothmanager'
//            userOrg = 'myorg' //An optional organization name when the repo belongs to one of the user's orgs
            desc = 'what a fantastic package indeed!'
            websiteUrl = 'https://github.com/bintray/bintray-examples'
            issueTrackerUrl = 'https://github.com/bintray/bintray-examples/issues'
            vcsUrl = 'https://github.com/JongChern/ShimmerTest'
            licenses = ['Apache-2.0']
            labels = ['example', 'gradle', 'bintray']
            publicDownloadNumbers = true
            attributes= ['a': ['ay1', 'ay2'], 'b': ['bee'], c: 'cee'] //Optional package-level attributes
            //Optional version descriptor
            version {
                name = project.version //Bintray logical version name
                desc = 'optional, version-specific description'
//                released  = 'optional, date of the version release' //2 possible values: date in the format of 'yyyy-MM-dd'T'HH:mm:ss.SSSZZ' OR a java.util.Date instance
//                vcsTag = '1.3.0'
//                attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin'] //Optional version-level attributes
//                gpg {
//                    sign = true //Determines whether to GPG sign the files. The default is false
//                    passphrase = 'passphrase' //Optional. The passphrase for GPG signing'
//                }
                mavenCentralSync {
                    sync = false //Optional (true by default). Determines whether to sync the version to Maven Central.
                    user = 'userToken' //OSS user token
                    password = 'paasword' //OSS user password
                    close = '1' //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
                }
            }
        }
    }
    */
    
    bintray {
        user = shimmer_bintray_username //this usually comes from gradle.properties file in ~/.gradle
        key = shimmer_bintray_api_key //this usually comes from gradle.properties file in ~/.gradle
        
//        configurations = ['deployables'] //When uploading configuration files
        // - OR -
        publications = ['mavenJava'] //When uploading Maven-based publication files
        // - AND/OR -
//        filesSpec { //When uploading any arbitrary files ('filesSpec' is a standard Gradle CopySpec)
//            from 'arbitrary-files'
//            into 'standalone_files/level1'
//            rename '(.+)\\.(.+)', '$1-suffix.$2'
//        }
        dryRun = false //Whether to run this as dry-run, without deploying
        publish = true //If version should be auto published after an upload
        pkg {
//            repo = 'myrepo'
	        repo = 'Shimmer'
	        name = 'shimmerbluetoothmanager'
//            userOrg = 'myorg' //An optional organization name when the repo belongs to one of the user's orgs
            desc = 'this is the bluetooth manager, with no OS specific code'
            websiteUrl = 'https://github.com/bintray/bintray-examples'
            issueTrackerUrl = 'https://github.com/bintray/bintray-examples/issues'
            vcsUrl = 'https://github.com/JongChern/ShimmerTest'
            licenses = ['Apache-2.0']
            labels = ['example', 'gradle', 'bintray']
            publicDownloadNumbers = true
            attributes= ['a': ['ay1', 'ay2'], 'b': ['bee'], c: 'cee'] //Optional package-level attributes
            //Optional version descriptor
            version {
                name = project.version //Bintray logical version name
                desc = ''
//                released  = 'optional, date of the version release' //2 possible values: date in the format of 'yyyy-MM-dd'T'HH:mm:ss.SSSZZ' OR a java.util.Date instance
//                vcsTag = '1.3.0'
//                attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin'] //Optional version-level attributes
//                gpg {
//                    sign = true //Determines whether to GPG sign the files. The default is false
//                    passphrase = 'passphrase' //Optional. The passphrase for GPG signing'
//                }
                mavenCentralSync {
                    sync = false //Optional (true by default). Determines whether to sync the version to Maven Central.
                    user = 'userToken' //OSS user token
                    password = 'paasword' //OSS user password
                    close = '1' //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
                }
            }
        }
    }
    
/*
sourceSets.all { set ->
    def jarTask = task("${set.name}Jar", type: Jar) {
        baseName = baseName + "-$set.name"
        from set.output
    }

    artifacts {
        archives jarTask
    }
}

sourceSets {
    api
    impl
}*/

//create a single Jar with all dependencies
task fatJar(type: Jar) {
	manifest {
        attributes 'Implementation-Title': 'Gradle Jar File Example',  
        	'Implementation-Version': version,
        	'Main-Class': 'com.shimmerresearch.driver'
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

//create a single Jar without dependencies
task singleJar(type: Jar) {
	manifest {
        attributes 'Implementation-Title': 'Gradle Jar File Example',  
        	'Implementation-Version': version,
        	'Main-Class': 'com.shimmerresearch.driver'
    }
    baseName = project.name
    jar {
     from sourceSets.main.allSource
 	}
    with jar
}

jar {
      manifest {
        attributes 'Implementation-Title': 'Gradle Quickstart',
                   'Implementation-Version': version
    }
}

/*
jar {
    from sourceSets.api.output
    from sourceSets.impl.output
}
*/

dependencies {
    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'

    compile 'commons-codec:commons-codec:1.5'
    compile 'commons-lang:commons-lang:2.6'

    compile project (':ShimmerDriver')
    //compile project (':ShimmerAlgorithms')
    
/*
    apiCompile 'commons-codec:commons-codec:1.5'

    implCompile sourceSets.api.output
    implCompile 'commons-lang:commons-lang:2.6'

    testCompile 'junit:junit:4.9'
    testCompile sourceSets.api.output
    testCompile sourceSets.impl.output
    runtime configurations.apiRuntime
    runtime configurations.implRuntime

    compile project (':ShimmerDriver')
    compile project (':ShimmerAlgorithms')
  */  
}

task wrapper(type: Wrapper) {
   gradleVersion = '2.14.1' //version required
}
/*
uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: uri("${buildDir}/repo"))

            addFilter("main") { artifact, file -> artifact.name == project.name }
            ["api", "impl"].each { type ->
                addFilter(type) { artifact, file -> artifact.name.endsWith("-$type") }
                
                // We now have to map our configurations to the correct maven scope for each pom
                ["compile", "runtime"].each { scope ->
                    configuration = configurations[type + scope.capitalize()]
                    ["main", type].each { pomName ->
                        pom(pomName).scopeMappings.addMapping 1, configuration, scope
                    }
                }
            }

        }
    }
}
*/